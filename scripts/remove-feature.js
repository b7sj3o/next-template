#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –∑ —à–∞–±–ª–æ–Ω—É
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node scripts/remove-feature.js <feature-name>
 * 
 * –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: auth, i18n, payments, storage, analytics
 */

const fs = require('fs');
const path = require('path');

const FEATURES = {
  auth: {
    files: [
      'lib/auth.ts',
      'middlewares/withAuth.ts',
      'modules/auth/',
      'app/api/v1/auth/',
      'schemas/auth.ts',
    ],
    dependencies: ['jose', 'bcrypt'],
    config: ['auth.config.ts']
  },
  i18n: {
    files: [
      'middlewares/withLocale.ts',
      'modules/i18n/',
      'languages/',
    ],
    dependencies: ['next-intl'],
    config: ['i18n.config.ts']
  },
  payments: {
    files: [
      'lib/payments.ts',
      'modules/payments/',
      'app/api/v1/payments/',
      'schemas/payment.ts',
    ],
    dependencies: ['stripe'],
    config: ['payments.config.ts']
  },
  storage: {
    files: [
      'lib/storage.ts',
      'modules/storage/',
      'app/api/v1/uploads/',
    ],
    dependencies: ['aws-sdk'],
    config: ['s3.config.ts']
  },
  analytics: {
    files: [
      'modules/analytics/',
    ],
    dependencies: [],
    config: []
  }
};

function removeFeature(featureName) {
  if (!FEATURES[featureName]) {
    console.error(`‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è: ${featureName}`);
    console.log(`–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: ${Object.keys(FEATURES).join(', ')}`);
    process.exit(1);
  }

  const feature = FEATURES[featureName];
  console.log(`üóëÔ∏è  –í–∏–¥–∞–ª—è—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é: ${featureName}`);

  // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª–∏
  feature.files.forEach(file => {
    const filePath = path.join(process.cwd(), file);
    if (fs.existsSync(filePath)) {
      if (fs.statSync(filePath).isDirectory()) {
        fs.rmSync(filePath, { recursive: true, force: true });
        console.log(`üìÅ –í–∏–¥–∞–ª–µ–Ω–æ –ø–∞–ø–∫—É: ${file}`);
      } else {
        fs.unlinkSync(filePath);
        console.log(`üìÑ –í–∏–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª: ${file}`);
      }
    }
  });

  // –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ–∞–π–ª–∏
  feature.config.forEach(configFile => {
    const configPath = path.join(process.cwd(), 'config', configFile);
    if (fs.existsSync(configPath)) {
      fs.unlinkSync(configPath);
      console.log(`‚öôÔ∏è  –í–∏–¥–∞–ª–µ–Ω–æ –∫–æ–Ω—Ñ—ñ–≥: config/${configFile}`);
    }
  });

  console.log(`‚úÖ –§—É–Ω–∫—Ü—ñ—è ${featureName} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞!`);
  console.log(`üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: ${feature.dependencies.join(', ')}`);
}

// –û—Ç—Ä–∏–º—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
const featureName = process.argv[2];

if (!featureName) {
  console.error('‚ùå –í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è');
  console.log('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node scripts/remove-feature.js <feature-name>');
  console.log(`–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: ${Object.keys(FEATURES).join(', ')}`);
  process.exit(1);
}

removeFeature(featureName);
